{"version":3,"sources":["index.js"],"names":["Upload","id","uploadDataManager","setUploadData","console","log","fileName","UploadManager","upload","UploadDataManager","uploadDatabase","file","uploadManager","getUpload","dom","document","createElement","innerHTML","body","appendChild","querySelector","onclick","del","uploadContext","uploadData","key","uploadObj1","i","add"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAMA;;;;;;;wBACCC,IAAI;AACPC,wBAAkBC,aAAlB,CAAgCF,EAAhC,EAAoC,IAApC;;AAEAG,cAAQC,GAAR,kBAAiB,KAAKC,QAAtB;AACD;;;;;;IAGGC;AACJ,2BAAe;AAAA;;AACb,SAAKC,MAAL,GAAc,IAAd;AACD;;;;gCAEY;AACX,UAAI,CAAC,KAAKA,MAAV,EAAkB;AAChBJ,gBAAQC,GAAR,CAAY,KAAZ;AACA,aAAKG,MAAL,GAAc,IAAIR,MAAJ,EAAd;AACA,eAAO,KAAKQ,MAAZ;AACD;;AAEDJ,cAAQC,GAAR,CAAY,IAAZ;AACA,aAAO,KAAKG,MAAZ;AACD;;;;;;IAGGC;AACJ,+BAAe;AAAA;;AACb,SAAKC,cAAL,GAAsB,EAAtB;AACD;;AAED;AACA;;;;;wBACKT,IAAIU,MAAM;AACb,UAAIH,SAASI,cAAcC,SAAd,EAAb;AACA,UAAIC,MAAMC,SAASC,aAAT,CAAuB,KAAvB,CAAV;;AAEAF,UAAIG,SAAJ,mDAEqBN,KAAKL,QAF1B;AAMAS,eAASG,IAAT,CAAcC,WAAd,CAA0BL,GAA1B;;AAEA;AACAA,UAAIM,aAAJ,CAAkB,UAAlB,EAA8BC,OAA9B,GAAwC,YAAM;AAC5Cb,eAAOc,GAAP,CAAWrB,EAAX;AACD,OAFD;;AAIA;AACA,WAAKS,cAAL,CAAoBT,EAApB,IAA0B;AACxBA,YAAIA,EADoB;AAExBK,kBAAUK,KAAKL,QAFS;AAGxBQ,aAAKA;AAHmB,OAA1B;;AAMA,aAAO,KAAKJ,cAAL,CAAoBT,EAApB,CAAP;AACD;;;kCAEcA,IAAIsB,eAAe;AAChC,UAAIC,aAAa,KAAKd,cAAL,CAAoBT,EAApB,CAAjB;;AAEA,WAAK,IAAIwB,GAAT,IAAgBD,UAAhB,EAA4B;AAC1BD,sBAAcE,GAAd,IAAqBD,WAAWC,GAAX,CAArB;AACD;AACF;;;;;;AAGH,IAAMC,aAAa,CACjB;AACEpB,YAAU;AADZ,CADiB,EAIjB;AACEA,YAAU;AADZ,CAJiB,EAOjB;AACEA,YAAU;AADZ,CAPiB,CAAnB;;AAYA;AACA,IAAIM,gBAAgB,IAAIL,aAAJ,EAApB;AACA;AACA,IAAIL,oBAAoB,IAAIO,iBAAJ,EAAxB;;AAEA,KAAK,IAAIkB,IAAI,CAAR,EAAWhB,IAAhB,EAAsBA,OAAOe,WAAWC,GAAX,CAA7B,GAA+C;AAC7CzB,oBAAkB0B,GAAlB,CAAsBD,CAAtB,EAAyBhB,IAAzB;AACD","file":"share-pattern.e8711de6.map","sourcesContent":["class Upload {\n  del (id) {\n    uploadDataManager.setUploadData(id, this)\n\n    console.log(`删除${this.fileName}`)\n  }\n}\n\nclass UploadManager {\n  constructor () {\n    this.upload = null\n  }\n\n  getUpload () {\n    if (!this.upload) {\n      console.log('不存在')\n      this.upload = new Upload()\n      return this.upload\n    }\n\n    console.log('存在')\n    return this.upload\n  }\n}\n\nclass UploadDataManager {\n  constructor () {\n    this.uploadDatabase = {}\n  }\n\n  // 添加上传数据，并创建DOM节点插入到body中\n  // 我们需要在内部获取upload对象的context，这样我们可以访问它的del方法用于删除对应id的上传对象\n  add (id, file) {\n    let upload = uploadManager.getUpload()\n    let dom = document.createElement('div')\n\n    dom.innerHTML = `\n      <div>\n        <span>fileName：${file.fileName}</span>\n        <button id=\"del-btn\">删除</button>\n      </div>\n    `\n    document.body.appendChild(dom)\n\n    // 给删除按钮绑定删除事件\n    dom.querySelector('#del-btn').onclick = () => {\n      upload.del(id)\n    }\n\n    // 添加上传数据\n    this.uploadDatabase[id] = {\n      id: id,\n      fileName: file.fileName,\n      dom: dom\n    }\n\n    return this.uploadDatabase[id]\n  }\n\n  setUploadData (id, uploadContext) {\n    let uploadData = this.uploadDatabase[id]\n\n    for (let key in uploadData) {\n      uploadContext[key] = uploadData[key]\n    }\n  }\n}\n\nconst uploadObj1 = [\n  {\n    fileName: '1.txt'\n  },\n  {\n    fileName: '2.txt'\n  },\n  {\n    fileName: '3.txt'\n  }\n]\n\n// 用于获取上传对象（单例）\nvar uploadManager = new UploadManager()\n// 管理需要上传的每个对象的数据\nvar uploadDataManager = new UploadDataManager()\n\nfor (let i = 0, file; file = uploadObj1[i++];) {\n  uploadDataManager.add(i, file)\n}\n"]}